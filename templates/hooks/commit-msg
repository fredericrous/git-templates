#!/usr/bin/env node
/**
 * Opinionated commit message validator
 * Mostly follows git recommendations and conventional commits but add a twist of emoji
 * https://git-scm.com/docs/git-commit
 * https://www.conventionalcommits.org/en/v1.0.0/
 * https://gitmoji.dev/
 *
 * It validates:
 * - the summary is MAX_SUMMARY_LINE_SIZE (50) characters
 * - a prefix is present
 * - a description is present
 *
 * It formats the commit:
 * - add the correct emoji defined in COMMIT_TYPE for the summary prefix
 * - group the footers together and insure a blank line between footer and body
 * - it breaks the body line size to MAX_BODY_LINE_SIZE (72)
 *
 * Author: https://github.com/fredericrous
 */
const fs = require('fs');
const [, , /*interpreter path*/ /*script name*/ filename] = process.argv;

const MAX_SUMMARY_LINE_SIZE = 50;
const MAX_BODY_LINE_SIZE = 72;
const COMMIT_TYPE = {
  build: '👷',
  chore: '🔧',
  docs: '📝️',
  feat: '✨',
  fix: '🐛',
  perf: '⚡️',
  refactor: '♻️',
  revert: '⏪️',
  style: '🎨',
  test: '🚨',
  add: '➕',
  remove: '➖',
};
const COLORS = {
  green: '112',
  orange: '208',
  red: '160',
};

if (require.main === module) {
  if (!filename) {
    console.info(['Usage:', '', './commit-msg <filename>']);
    process.exit(1);
  }
} else {
  console.error('Place this script in your git hooks/ folder or call it from your shell.');
  process.exit(1);
}
const commitMsg = fs.readFileSync(filename, 'utf8');
const typeArray = Object.keys(COMMIT_TYPE);

const message = (function formatMsg() {
  const mark = {
    ok: '\u2713',
    err: '\u2717',
  };

  const colorMsg = (msg, color) => `\u001b[38;5;${color}m${msg}\u001b[0m`;
  return {
    valid: (msg) => console.info(`  ${colorMsg(mark.ok, COLORS.green)} ${msg}`),
    error: (msg) => console.error(`  ${colorMsg(mark.err, COLORS.red)} ${msg}`),
    orange: (msg) => colorMsg(msg, COLORS.orange),
  };
})();
const noComments = (lines) => lines?.replace(/^#.*(\n|$)/gm, '') || '';
const validateSummarySize = (commitMsg, maxCharcaters) => {
  const [firstLine] = noComments(commitMsg).split('\n');
  return firstLine && firstLine.length < maxCharcaters;
};
if (!validateSummarySize(commitMsg, MAX_SUMMARY_LINE_SIZE)) {
  message.error(
    `Commit's first line should exist and be under ${message.orange(
      MAX_SUMMARY_LINE_SIZE
    )} characters.`
  );
  process.exit(1);
}
message.valid(`Summary size is inferior to ${message.orange(MAX_SUMMARY_LINE_SIZE)} characters`);

const extractConventionalCommit = (commitMsg, typeArray) => {
  // match any emoji. source: https://stackoverflow.com/a/43243160/1391012
  const emojiRegex =
    '(?:[\u00A9\u00AE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9-\u21AA\u231A-\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA-\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614-\u2615\u2618\u261D\u2620\u2622-\u2623\u2626\u262A\u262E-\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u2660\u2663\u2665-\u2666\u2668\u267B\u267F\u2692-\u2697\u2699\u269B-\u269C\u26A0-\u26A1\u26AA-\u26AB\u26B0-\u26B1\u26BD-\u26BE\u26C4-\u26C5\u26C8\u26CE-\u26CF\u26D1\u26D3-\u26D4\u26E9-\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733-\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763-\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934-\u2935\u2B05-\u2B07\u2B1B-\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|(?:\uD83C[\uDC04\uDCCF\uDD70-\uDD71\uDD7E-\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01-\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50-\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96-\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F-\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95-\uDD96\uDDA4-\uDDA5\uDDA8\uDDB1-\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDEE0-\uDEE5\uDEE9\uDEEB-\uDEEC\uDEF0\uDEF3-\uDEF6]|\uD83E[\uDD10-\uDD1E\uDD20-\uDD27\uDD30\uDD33-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD4B\uDD50-\uDD5E\uDD80-\uDD91\uDDC0]))';
  const commitTypeRegex = typeArray.join('|');
  const vaildateCommitRegex = new RegExp(
    `^\\s*(${emojiRegex})?.*(${commitTypeRegex})(\\(\\w+\\))?(!)?:\\s{0,}(.*)`,
    'ms'
  );
  return commitMsg.match(vaildateCommitRegex) || [];
};
const [, , /*input*/ /*emoji*/ prefix, scope, breakingChanges, restOfMessage] =
  extractConventionalCommit(noComments(commitMsg), typeArray);
if (!prefix) {
  message.error(`Commits MUST be prefixed with a type, which consists of a noun:
    ${typeArray.map(message.orange).join(', ')}
    The prefix must be followed by the OPTIONAL scope, OPTIONAL !,
    and REQUIRED terminal colon and space.
    A scope MAY be provided after a type. A scope MUST consist of a noun describing
    a section of the codebase surrounded by parenthesis, e.g., fix(parser)`);
  process.exit(1);
}

const [description, ...commitBody] = restOfMessage?.split('\n') || [];
if (!description) {
  message.error(`A description MUST immediately follow the ${message.orange(
    'colon'
  )} and ${message.orange('space')} after the type/scope prefix.
    The description is a short summary of the code changes, e.g., fix: array parsing issue when multiple spaces were contained in string.`);
  process.exit(1);
}
message.valid(`A description is present in the summary`);

//wrap might be shitty if there is a too long comment
const wrap = (w) => {
  const breakLineRegex = new RegExp(`(?![^\\n]{1,${w}}$)([^\\n]{1,${w}})\\s`, 'g');
  return (text) => text.replace(breakLineRegex, '$1\n');
};
const formatFooter = () => {
  const isFooter = (text) =>
    /\w-\w{1,}:\s\w/.test(text) ||
    /BREAKING[ -]CHANGE:\s\w/.test(text) ||
    /Refs:?\s#?\d/.test(text) ||
    text === '';
  function truthyCounter([firstElem, ...rest], tester, counter = 0) {
    return tester(firstElem) ? truthyCounter(rest, tester, counter + 1) : counter;
  }
  const removeLastNewLines = (text) => text.replace(/\n{1,}$/, '');
  return (format) => {
    const commitMsgArray = removeLastNewLines(noComments(format)).split('\n');
    const invertedCommitMsg = commitMsgArray.slice().reverse();
    const footerSize = truthyCounter(invertedCommitMsg, isFooter);
    const bodyWithoutFooter = commitMsgArray.slice(0, commitMsgArray.length - footerSize);
    const footerWithoutExtraNewLines = commitMsgArray
      .slice(commitMsgArray.length - footerSize)
      .filter((x) => x !== '');
    return [...bodyWithoutFooter, '', ...footerWithoutExtraNewLines].join('\n') + '\n';
  };
};
const format = `${COMMIT_TYPE[prefix]}  ${prefix}${scope || ''}${
  breakingChanges || ''
}: ${description}\n\n${wrap(MAX_BODY_LINE_SIZE)(commitBody.join('\n'))}\n`;
fs.writeFileSync(filename, formatFooter()(format), 'utf8');
